*********************Operators in Python****************************
Unary: It takes only one operand for execution 

~a 
-b
Binary Operators: It takes two operand for execution. 


1. Arithmatic
2. Relational / comparison
3. Logical
4. Bitwise
5. Assignment
6. Special Types

1. Arithmatic
+
-
*
/   It returns always float value
%  Mod   It returns Reminder (int) (It depends on arguments if both are int then result is int otherwise float
// floor division  (int)
**  Power  
#It takes two operand for execution so it is called binary operator.
# We can use +,* for string type also
# for  + operator we need both str types 
#for * operator we need int and str type (It replicates the string by given int times.)

>>> 2+3
5
>>> 3-2
1
>>> 3*2
6
>>> 4/2
2.0
>>> 4.0/2
2.0
>>> 4/2.0
2.0
>>> 3/2
1.5
>>> True/True
1.0
>>> True/False
Traceback (most recent call last):
  File "<pyshell#115>", line 1, in <module>
    True/False
ZeroDivisionError: division by zero
>>> False/True
0.0
>>> 2
2
>>> "2"/"2"
Traceback (most recent call last):
  File "<pyshell#118>", line 1, in <module>
    "2"/"2"
TypeError: unsupported operand type(s) for /: 'str' and 'str'
>>> 4//2
2
>>> 4.0//2
2.0
>>> 3.0//2
1.0
>>> 5//3
1
>>> 5/3
1.6666666666666667
>>> 5.0//3
1.0
>>> True//True
1
>>> False//True
0
>>> 3**2
9
>>> 3**6
729
>>> 3.2**2
10.240000000000002
>>> log(3)**2
Traceback (most recent call last):
  File "<pyshell#130>", line 1, in <module>
    log(3)**2
NameError: name 'log' is not defined
>>> 2**0
1
>>> 

2. Relational 
<, >, <=, >= 
# Gives us bool results

#It supports chaining of operators
a=2, b=3, c=4,d=5
a<b<c<d
#Here Every condition must be satisfied then only result is True otherwise result is false.

#Equality operator
== , !=
10==10
20!=10
This also can follow chaining of operator
a,b,c,d=2,2,3,3
a==b==c==d


# Logical Operators
and, or, not
# We can use this for all type
1. bool type: 
 and=> if both arguments are True then Result is True
 or=> atleast one argument is True then result is true
 not=> Complement 
 
2. for Non bool value:
	0 means False
	non zero means True
	empty string is always False

x and y 
if x is eveluated as false then it returns x otherwise it returns y
10 and 20   -> 20
0 and 20  -> 0

x or y 
if x is true then result is x otherwise it is y
10 or 20 -> 10
0 or 20 -> 20

not x
if x is false thrn result is True otherwise False

3. Bitwise   

           16  8  4  2  1
			   0  0	 0	1
			   0  1  0  0
			   0  1  0  0
			   1  1  1  1
			0001  0  1  0  0
			   
			   
			   
(1)   -> 0001
(2)   -> 0010
(3)   -> 0011
(4)   -> 0100
(8)   -> 
(7)
(15)
(019)

8 4 2 1
1 1 1 1

128 64 32 16 8 4 2 1    -> decimal number
0    0  0  1 0 1 0 0

#These operators works on bits
# These operators are applicable on only for int and bool
& and- if both bits are 1 then result is 1 otherwise 0
|  or - if atleast one bit is 1 then the result is 1 otherwise 0
^  xor - if the bits are different then result is 1 otherwise it is 0
~  not- this is bitwise complement operator
<< (Left shift)
>> (Right shift)

a=5   
b=3
c=a&b
a= 0101
b= 0011
c= 0001  

a=6
b=7
a&b
0 1 1 0
0 1 1 1
0 1 1 0


c=1
a=4
b=9
0100
1001
0000

a|b
a= 0101
b= 0011
c= 0111
c=7

a^b    
0101
0011
0110
6
<<
# for shift operators we need 8 bit binary number
a=5    0101
b=2    
c=a<<b It means we will shift the bits of a toward left by b bits

a =  10010100
    
	
	00101000

c=a>>b
   00000001 
   00000001
a=9 
b=2
a=4
b=2
c=a>>b
   00000100
   00000001

# Assignment operator.
=  assignment operator 
a=2
b=a

Compound assignment 
a=a+b ->  a+=b  so here += is compound assignment
-=
*=
/=
//=
%=
&=
|=

a=a+b
a+=b
a=a+1
a+=1
c=a+b
>>> 10 and 20
20
>>> 0 and 20
0
>>> None and 20
>>> "" and 20
''
>>> 10 or 20
10
>>> 0 or 20
20
>>> " " or 30
' '
>>> not 0
True
>>> not 20
False
>>> # bitwise
>>> 5&3
1
>>> 6&7
6
>>> 1&4&9
0
>>> 15 | 20
31
>>> 4^7
3
>>> 5<<2
20
>>> 5<<3
40
>>> 148<<2
592
>>> 5>>2
1
>>> 2+=3
SyntaxError: can't assign to literal
>>> a=2
>>> b=3
>>> a+=b
>>> b
3
>>> a
5